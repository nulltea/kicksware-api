@using System.Globalization
@using System.Linq
@using Core.Reference
@using Microsoft.EntityFrameworkCore.Internal
@using Newtonsoft.Json
@using web_app_service.Data.Reference_Data
@using web_app_service.Utils.Helpers
@model Core.Model.IFilteredModel<Core.Entities.Reference.SneakerReference>

@{
	Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles
{
	<link href="~/styles/css/products/products.css" rel="stylesheet"/>
	<link href="~/styles/css/products/filter.css" rel="stylesheet"/>
	<link href="~/styles/css/products/results.css" rel="stylesheet"/>
	<link href="~/styles/css/responsive/products.responsive.css" rel="stylesheet"/>
}

<div class="products">
	<div class="container products-content">
		<div class="row filter-summary">
			<button class="button toggle-menu">
				<span>SHOW FILTERS</span>
				@Html.VectorIconRender("filter.svg")
				@Html.VectorIconRender("filter_used.svg")
			</button>
			<div class="count">
				@{
					var listingFrom = (Model.CurrentPage - 1) * Model.PageSize;
					var listingTo = listingFrom + Model.PageSize;
					var listingTotal = @Model.CountTotal;
				}
				<span>Showing @listingFrom - @listingTo / @listingTotal results</span>
			</div>
			<div class="control-group">
				<div class="list-select sort_type">
					<select asp-for="SortParameter.Criteria" asp-items="@Html.GetEnumSelectList<SortCriteria>()" class="dropdown_item_select" id="currency">
						<option disabled="">Category</option>
					</select>
				</div>
				<div class="layout-toggle">
					<input type="checkbox" checked/>
					@Html.VectorIconRender("list.svg", "is-unchecked")
					@Html.VectorIconRender("grid.svg", "is-checked")
				</div>
			</div>
		</div>
		<div class="row content-area">
			<aside class="filter-sidebar">
				<nav class="accordion collapsed arrows">
					<header class="menu-panel">
						<label class="section-title">FILTERS</label>
					</header>
					<input type="checkbox" name="accordion" class="accordion-control" id="mp1"/>
					<section class="menu-panel brand">
						<label class="section-title" for="mp1">Brand</label>
						<div class="section-content">
							<input type="search" id="brand-filter" class="autocomplete-filter filter-input" required="required">
							<div class="brand-list">
								@foreach (var brand in Model["Brand"].Take(4)) //TODO
								{
									<div class="brand-row">
										@brand.RenderCheckbox(new {@class = "regular_checkbox"})
									</div>
								}
							</div>
						</div>
					</section>
					<input type="checkbox" name="accordion" class="accordion-control" id="mp2"/>
					<section class="menu-panel size">
						<label class="section-title" for="mp2">Size</label>
						<div class="section-content">
							<div class="size-grid">
								@foreach (var size in Model["Size"])
								{
									<button class="button size-cell">
										@size.RenderCheckbox()
									</button>
								}
							</div>
						</div>
					</section>
					<input type="checkbox" name="accordion" class="accordion-control" id="mp3"/>
					<section class="menu-panel color">
						<label class="section-title" for="mp3">Color</label>
						<div class="section-content">
							<div class="color-picker">
								@foreach (var color in Model["Color"])
								{
									var sourceValue = color.GetSourceValue<FilterColor>();
									<button class="button color-item" style="border-bottom: 3px solid @sourceValue.Hex; background: @sourceValue.Hex">
										@color.RenderCheckbox()
									</button>
								}
							</div>
						</div>
					</section>
					<input type="checkbox" name="accordion" class="accordion-control" id="mp4"/>
					<section class="menu-panel price">
						<label class="section-title" for="mp4">Price</label>
						<div class="section-content">
							<div class="price-range">
								<div class="multi-range">
									<input type="range" class="price-slider min" min="0" value="0" max="1000"/>
									<input type="range" class="price-slider max" min="100" value="1000" max="1000"/>
								</div>
								<div class="multi-input">
									@Model["Price"][0].RenderInput(new {type = "number", value = 100, @class = "filter-input price-input min"})
									@Model["Price"][1].RenderInput(new {type = "number", value = 1000, @class = "filter-input price-input max"})
								</div>
							</div>
						</div>
					</section>
					<input type="checkbox" name="accordion" class="accordion-control" id="mp5"/>
					<section class="menu-panel condition">
						<label class="section-title" for="mp5">Condition</label>
						<div class="section-content">
							<div class="condition-grid">
								@foreach (var condition in Model["Condition"])
								{
									<button class="button">
										@condition.RenderCheckbox()
									</button>
								}
							</div>
						</div>
					</section>
				</nav>
				<div class="spacer"></div>
			</aside>
			<div class="product-results">
				<div class="filter-overbar">
					<div class="filter-chips">
						<button class="button" id="filter-reset">
							<span>CLEAR ALL</span>
							@Html.VectorIconRender("close.svg")
						</button>
					</div>
					<div class="spacer"></div>
				</div>
				<div class="result-content" id="result-content">
					@{ await Html.RenderPartialAsync("ReferencesPartial", Model); }
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts
{
	<script src="~/plugins/jquery-ajax-unobtrusive/jquery.unobtrusive-ajax.js"></script>
	<script src="~/scripts/products/products.js"></script>
	<script type="text/javascript">
	$(document).ready(function () {
		initCustomDropDown();
		autocompleteFilter("#brand-filter", @Html.Raw(JsonConvert.SerializeObject(@Model["Brand"])));
	});
	</script>
}