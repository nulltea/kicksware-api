// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: cdn.proto

package proto

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MimeType string `protobuf:"bytes,2,opt,name=mimeType,proto3" json:"mimeType,omitempty"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{0}
}

func (x *Content) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Content) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

type ContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename     string        `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Collection   string        `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	ImageOptions *ImageOptions `protobuf:"bytes,3,opt,name=imageOptions,proto3" json:"imageOptions,omitempty"`
}

func (x *ContentRequest) Reset() {
	*x = ContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentRequest) ProtoMessage() {}

func (x *ContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentRequest.ProtoReflect.Descriptor instead.
func (*ContentRequest) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{1}
}

func (x *ContentRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ContentRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *ContentRequest) GetImageOptions() *ImageOptions {
	if x != nil {
		return x.ImageOptions
	}
	return nil
}

type ImageOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  int64 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height int64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *ImageOptions) Reset() {
	*x = ImageOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageOptions) ProtoMessage() {}

func (x *ImageOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageOptions.ProtoReflect.Descriptor instead.
func (*ImageOptions) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{2}
}

func (x *ImageOptions) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageOptions) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type ContentInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    []byte          `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Request *ContentRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *ContentInput) Reset() {
	*x = ContentInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentInput) ProtoMessage() {}

func (x *ContentInput) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentInput.ProtoReflect.Descriptor instead.
func (*ContentInput) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{3}
}

func (x *ContentInput) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ContentInput) GetRequest() *ContentRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type UploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{4}
}

func (x *UploadResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UploadResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_cdn_proto protoreflect.FileDescriptor

var file_cdn_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x64, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x39, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x85, 0x01,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3c, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x53, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0xc9, 0x02, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a,
	0x08, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x04, 0x43, 0x72, 0x6f, 0x70, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x09, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x38, 0x0a, 0x0d,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x42, 0x34, 0x5a, 0x2a, 0x67, 0x6f, 0x2e, 0x6b, 0x69, 0x63,
	0x6b, 0x73, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x64, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cdn_proto_rawDescOnce sync.Once
	file_cdn_proto_rawDescData = file_cdn_proto_rawDesc
)

func file_cdn_proto_rawDescGZIP() []byte {
	file_cdn_proto_rawDescOnce.Do(func() {
		file_cdn_proto_rawDescData = protoimpl.X.CompressGZIP(file_cdn_proto_rawDescData)
	})
	return file_cdn_proto_rawDescData
}

var file_cdn_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_cdn_proto_goTypes = []interface{}{
	(*Content)(nil),        // 0: proto.Content
	(*ContentRequest)(nil), // 1: proto.ContentRequest
	(*ImageOptions)(nil),   // 2: proto.ImageOptions
	(*ContentInput)(nil),   // 3: proto.ContentInput
	(*UploadResponse)(nil), // 4: proto.UploadResponse
}
var file_cdn_proto_depIdxs = []int32{
	2, // 0: proto.ContentRequest.imageOptions:type_name -> proto.ImageOptions
	1, // 1: proto.ContentInput.request:type_name -> proto.ContentRequest
	1, // 2: proto.ContentService.Original:input_type -> proto.ContentRequest
	1, // 3: proto.ContentService.Crop:input_type -> proto.ContentRequest
	1, // 4: proto.ContentService.Resize:input_type -> proto.ContentRequest
	1, // 5: proto.ContentService.Thumbnail:input_type -> proto.ContentRequest
	3, // 6: proto.ContentService.Upload:input_type -> proto.ContentInput
	1, // 7: proto.ContentService.StreamContent:input_type -> proto.ContentRequest
	0, // 8: proto.ContentService.Original:output_type -> proto.Content
	0, // 9: proto.ContentService.Crop:output_type -> proto.Content
	0, // 10: proto.ContentService.Resize:output_type -> proto.Content
	0, // 11: proto.ContentService.Thumbnail:output_type -> proto.Content
	4, // 12: proto.ContentService.Upload:output_type -> proto.UploadResponse
	0, // 13: proto.ContentService.StreamContent:output_type -> proto.Content
	8, // [8:14] is the sub-list for method output_type
	2, // [2:8] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_cdn_proto_init() }
func file_cdn_proto_init() {
	if File_cdn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cdn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cdn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cdn_proto_goTypes,
		DependencyIndexes: file_cdn_proto_depIdxs,
		MessageInfos:      file_cdn_proto_msgTypes,
	}.Build()
	File_cdn_proto = out.File
	file_cdn_proto_rawDesc = nil
	file_cdn_proto_goTypes = nil
	file_cdn_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContentServiceClient interface {
	Original(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*Content, error)
	Crop(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*Content, error)
	Resize(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*Content, error)
	Thumbnail(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*Content, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (ContentService_UploadClient, error)
	StreamContent(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (ContentService_StreamContentClient, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) Original(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/proto.ContentService/Original", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Crop(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/proto.ContentService/Crop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Resize(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/proto.ContentService/Resize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Thumbnail(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/proto.ContentService/Thumbnail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (ContentService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ContentService_serviceDesc.Streams[0], "/proto.ContentService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &contentServiceUploadClient{stream}
	return x, nil
}

type ContentService_UploadClient interface {
	Send(*ContentInput) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type contentServiceUploadClient struct {
	grpc.ClientStream
}

func (x *contentServiceUploadClient) Send(m *ContentInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contentServiceUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contentServiceClient) StreamContent(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (ContentService_StreamContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ContentService_serviceDesc.Streams[1], "/proto.ContentService/StreamContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &contentServiceStreamContentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContentService_StreamContentClient interface {
	Recv() (*Content, error)
	grpc.ClientStream
}

type contentServiceStreamContentClient struct {
	grpc.ClientStream
}

func (x *contentServiceStreamContentClient) Recv() (*Content, error) {
	m := new(Content)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContentServiceServer is the server API for ContentService service.
type ContentServiceServer interface {
	Original(context.Context, *ContentRequest) (*Content, error)
	Crop(context.Context, *ContentRequest) (*Content, error)
	Resize(context.Context, *ContentRequest) (*Content, error)
	Thumbnail(context.Context, *ContentRequest) (*Content, error)
	Upload(ContentService_UploadServer) error
	StreamContent(*ContentRequest, ContentService_StreamContentServer) error
}

// UnimplementedContentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (*UnimplementedContentServiceServer) Original(context.Context, *ContentRequest) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Original not implemented")
}
func (*UnimplementedContentServiceServer) Crop(context.Context, *ContentRequest) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Crop not implemented")
}
func (*UnimplementedContentServiceServer) Resize(context.Context, *ContentRequest) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resize not implemented")
}
func (*UnimplementedContentServiceServer) Thumbnail(context.Context, *ContentRequest) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thumbnail not implemented")
}
func (*UnimplementedContentServiceServer) Upload(ContentService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedContentServiceServer) StreamContent(*ContentRequest, ContentService_StreamContentServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamContent not implemented")
}

func RegisterContentServiceServer(s *grpc.Server, srv ContentServiceServer) {
	s.RegisterService(&_ContentService_serviceDesc, srv)
}

func _ContentService_Original_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Original(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContentService/Original",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Original(ctx, req.(*ContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Crop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Crop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContentService/Crop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Crop(ctx, req.(*ContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Resize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Resize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContentService/Resize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Resize(ctx, req.(*ContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Thumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Thumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContentService/Thumbnail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Thumbnail(ctx, req.(*ContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContentServiceServer).Upload(&contentServiceUploadServer{stream})
}

type ContentService_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*ContentInput, error)
	grpc.ServerStream
}

type contentServiceUploadServer struct {
	grpc.ServerStream
}

func (x *contentServiceUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contentServiceUploadServer) Recv() (*ContentInput, error) {
	m := new(ContentInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ContentService_StreamContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContentServiceServer).StreamContent(m, &contentServiceStreamContentServer{stream})
}

type ContentService_StreamContentServer interface {
	Send(*Content) error
	grpc.ServerStream
}

type contentServiceStreamContentServer struct {
	grpc.ServerStream
}

func (x *contentServiceStreamContentServer) Send(m *Content) error {
	return x.ServerStream.SendMsg(m)
}

var _ContentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Original",
			Handler:    _ContentService_Original_Handler,
		},
		{
			MethodName: "Crop",
			Handler:    _ContentService_Crop_Handler,
		},
		{
			MethodName: "Resize",
			Handler:    _ContentService_Resize_Handler,
		},
		{
			MethodName: "Thumbnail",
			Handler:    _ContentService_Thumbnail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _ContentService_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamContent",
			Handler:       _ContentService_StreamContent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cdn.proto",
}
