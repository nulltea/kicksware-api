// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: reference.proto

package proto

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	proto1 "go.kicksware.com/api/shared/api/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SneakerBrand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueId    string `protobuf:"bytes,1,opt,name=uniqueId,proto3" json:"uniqueId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Logo        string `protobuf:"bytes,3,opt,name=logo,proto3" json:"logo,omitempty"`
	Hero        string `protobuf:"bytes,4,opt,name=hero,proto3" json:"hero,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *SneakerBrand) Reset() {
	*x = SneakerBrand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reference_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SneakerBrand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SneakerBrand) ProtoMessage() {}

func (x *SneakerBrand) ProtoReflect() protoreflect.Message {
	mi := &file_reference_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SneakerBrand.ProtoReflect.Descriptor instead.
func (*SneakerBrand) Descriptor() ([]byte, []int) {
	return file_reference_proto_rawDescGZIP(), []int{0}
}

func (x *SneakerBrand) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *SneakerBrand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SneakerBrand) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *SneakerBrand) GetHero() string {
	if x != nil {
		return x.Hero
	}
	return ""
}

func (x *SneakerBrand) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SneakerModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueId    string `protobuf:"bytes,1,opt,name=uniqueId,proto3" json:"uniqueId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Brand       string `protobuf:"bytes,3,opt,name=brand,proto3" json:"brand,omitempty"`
	BaseModel   string `protobuf:"bytes,4,opt,name=baseModel,proto3" json:"baseModel,omitempty"`
	Hero        string `protobuf:"bytes,5,opt,name=hero,proto3" json:"hero,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *SneakerModel) Reset() {
	*x = SneakerModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reference_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SneakerModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SneakerModel) ProtoMessage() {}

func (x *SneakerModel) ProtoReflect() protoreflect.Message {
	mi := &file_reference_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SneakerModel.ProtoReflect.Descriptor instead.
func (*SneakerModel) Descriptor() ([]byte, []int) {
	return file_reference_proto_rawDescGZIP(), []int{1}
}

func (x *SneakerModel) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *SneakerModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SneakerModel) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *SneakerModel) GetBaseModel() string {
	if x != nil {
		return x.BaseModel
	}
	return ""
}

func (x *SneakerModel) GetHero() string {
	if x != nil {
		return x.Hero
	}
	return ""
}

func (x *SneakerModel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SneakerReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueId       string               `protobuf:"bytes,1,opt,name=uniqueId,proto3" json:"uniqueId,omitempty"`
	ManufactureSku string               `protobuf:"bytes,2,opt,name=manufactureSku,proto3" json:"manufactureSku,omitempty"`
	BrandName      string        `protobuf:"bytes,3,opt,name=brandName,proto3" json:"brandName,omitempty"`
	Brand          *SneakerBrand `protobuf:"bytes,4,opt,name=brand,proto3" json:"brand,omitempty"`
	ModelName      string        `protobuf:"bytes,5,opt,name=modelName,proto3" json:"modelName,omitempty"`
	Model          *SneakerModel `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	BaseModelName  string        `protobuf:"bytes,7,opt,name=baseModelName,proto3" json:"baseModelName,omitempty"`
	BaseModel      *SneakerModel `protobuf:"bytes,8,opt,name=baseModel,proto3" json:"baseModel,omitempty"`
	Description    string        `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	Color          string               `protobuf:"bytes,10,opt,name=color,proto3" json:"color,omitempty"`
	Gender         string               `protobuf:"bytes,11,opt,name=gender,proto3" json:"gender,omitempty"`
	Nickname       string               `protobuf:"bytes,12,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Designer       string               `protobuf:"bytes,26,opt,name=designer,proto3" json:"designer,omitempty"`
	Technology     string               `protobuf:"bytes,27,opt,name=technology,proto3" json:"technology,omitempty"`
	Materials      []string             `protobuf:"bytes,13,rep,name=materials,proto3" json:"materials,omitempty"`
	Categories     []string             `protobuf:"bytes,14,rep,name=categories,proto3" json:"categories,omitempty"`
	ReleaseDate    *timestamp.Timestamp `protobuf:"bytes,15,opt,name=releaseDate,proto3" json:"releaseDate,omitempty"`
	ReleaseDateStr string               `protobuf:"bytes,24,opt,name=releaseDateStr,proto3" json:"releaseDateStr,omitempty"`
	AddedDate      *timestamp.Timestamp `protobuf:"bytes,25,opt,name=AddedDate,proto3" json:"AddedDate,omitempty"`
	Price          float64              `protobuf:"fixed64,16,opt,name=price,proto3" json:"price,omitempty"`
	ImageLink      string               `protobuf:"bytes,17,opt,name=imageLink,proto3" json:"imageLink,omitempty"`
	ImageLinks     []string             `protobuf:"bytes,18,rep,name=imageLinks,proto3" json:"imageLinks,omitempty"`
	StadiumUrl     string               `protobuf:"bytes,19,opt,name=stadiumUrl,proto3" json:"stadiumUrl,omitempty"`
	GoatUrl        string               `protobuf:"bytes,23,opt,name=goatUrl,proto3" json:"goatUrl,omitempty"`
	Likes          int64                `protobuf:"varint,20,opt,name=likes,proto3" json:"likes,omitempty"`
	Liked          bool                 `protobuf:"varint,21,opt,name=liked,proto3" json:"liked,omitempty"`
}

func (x *SneakerReference) Reset() {
	*x = SneakerReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reference_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SneakerReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SneakerReference) ProtoMessage() {}

func (x *SneakerReference) ProtoReflect() protoreflect.Message {
	mi := &file_reference_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SneakerReference.ProtoReflect.Descriptor instead.
func (*SneakerReference) Descriptor() ([]byte, []int) {
	return file_reference_proto_rawDescGZIP(), []int{2}
}

func (x *SneakerReference) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *SneakerReference) GetManufactureSku() string {
	if x != nil {
		return x.ManufactureSku
	}
	return ""
}

func (x *SneakerReference) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *SneakerReference) GetBrand() *SneakerBrand {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *SneakerReference) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *SneakerReference) GetModel() *SneakerModel {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *SneakerReference) GetBaseModelName() string {
	if x != nil {
		return x.BaseModelName
	}
	return ""
}

func (x *SneakerReference) GetBaseModel() *SneakerModel {
	if x != nil {
		return x.BaseModel
	}
	return nil
}

func (x *SneakerReference) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SneakerReference) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *SneakerReference) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *SneakerReference) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SneakerReference) GetDesigner() string {
	if x != nil {
		return x.Designer
	}
	return ""
}

func (x *SneakerReference) GetTechnology() string {
	if x != nil {
		return x.Technology
	}
	return ""
}

func (x *SneakerReference) GetMaterials() []string {
	if x != nil {
		return x.Materials
	}
	return nil
}

func (x *SneakerReference) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *SneakerReference) GetReleaseDate() *timestamp.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *SneakerReference) GetReleaseDateStr() string {
	if x != nil {
		return x.ReleaseDateStr
	}
	return ""
}

func (x *SneakerReference) GetAddedDate() *timestamp.Timestamp {
	if x != nil {
		return x.AddedDate
	}
	return nil
}

func (x *SneakerReference) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SneakerReference) GetImageLink() string {
	if x != nil {
		return x.ImageLink
	}
	return ""
}

func (x *SneakerReference) GetImageLinks() []string {
	if x != nil {
		return x.ImageLinks
	}
	return nil
}

func (x *SneakerReference) GetStadiumUrl() string {
	if x != nil {
		return x.StadiumUrl
	}
	return ""
}

func (x *SneakerReference) GetGoatUrl() string {
	if x != nil {
		return x.GoatUrl
	}
	return ""
}

func (x *SneakerReference) GetLikes() int64 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *SneakerReference) GetLiked() bool {
	if x != nil {
		return x.Liked
	}
	return false
}

type ReferenceFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceID   []string              `protobuf:"bytes,1,rep,name=referenceID,proto3" json:"referenceID,omitempty"`
	RequestQuery  *_struct.Struct       `protobuf:"bytes,2,opt,name=requestQuery,proto3" json:"requestQuery,omitempty"`
	RequestParams *proto1.RequestParams `protobuf:"bytes,3,opt,name=requestParams,proto3" json:"requestParams,omitempty"`
}

func (x *ReferenceFilter) Reset() {
	*x = ReferenceFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reference_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceFilter) ProtoMessage() {}

func (x *ReferenceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_reference_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceFilter.ProtoReflect.Descriptor instead.
func (*ReferenceFilter) Descriptor() ([]byte, []int) {
	return file_reference_proto_rawDescGZIP(), []int{3}
}

func (x *ReferenceFilter) GetReferenceID() []string {
	if x != nil {
		return x.ReferenceID
	}
	return nil
}

func (x *ReferenceFilter) GetRequestQuery() *_struct.Struct {
	if x != nil {
		return x.RequestQuery
	}
	return nil
}

func (x *ReferenceFilter) GetRequestParams() *proto1.RequestParams {
	if x != nil {
		return x.RequestParams
	}
	return nil
}

type ReferenceInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	References    []*SneakerReference   `protobuf:"bytes,1,rep,name=references,proto3" json:"references,omitempty"`
	RequestParams *proto1.RequestParams `protobuf:"bytes,2,opt,name=requestParams,proto3" json:"requestParams,omitempty"`
}

func (x *ReferenceInput) Reset() {
	*x = ReferenceInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reference_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceInput) ProtoMessage() {}

func (x *ReferenceInput) ProtoReflect() protoreflect.Message {
	mi := &file_reference_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceInput.ProtoReflect.Descriptor instead.
func (*ReferenceInput) Descriptor() ([]byte, []int) {
	return file_reference_proto_rawDescGZIP(), []int{4}
}

func (x *ReferenceInput) GetReferences() []*SneakerReference {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *ReferenceInput) GetRequestParams() *proto1.RequestParams {
	if x != nil {
		return x.RequestParams
	}
	return nil
}

type ReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	References []*SneakerReference `protobuf:"bytes,1,rep,name=references,proto3" json:"references,omitempty"`
	Count      int64               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ReferenceResponse) Reset() {
	*x = ReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reference_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceResponse) ProtoMessage() {}

func (x *ReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reference_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceResponse.ProtoReflect.Descriptor instead.
func (*ReferenceResponse) Descriptor() ([]byte, []int) {
	return file_reference_proto_rawDescGZIP(), []int{5}
}

func (x *ReferenceResponse) GetReferences() []*SneakerReference {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *ReferenceResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_reference_proto protoreflect.FileDescriptor

var file_reference_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x0c, 0x53, 0x6e, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65,
	0x72, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x72, 0x6f, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x53, 0x6e, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x72, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x72, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x07, 0x0a, 0x10,
	0x53, 0x6e, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x75, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x6b, 0x75, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x64, 0x69, 0x75, 0x6d, 0x55, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x64, 0x69, 0x75, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x61,
	0x74, 0x55, 0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x6f, 0x61, 0x74,
	0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b,
	0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x22,
	0xac, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x85,
	0x01, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x62, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6e, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xef, 0x02, 0x0a, 0x10, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x43, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3f, 0x5a, 0x35,
	0x67, 0x6f, 0x2e, 0x6b, 0x69, 0x63, 0x6b, 0x73, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x52, 0x50, 0x43, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_reference_proto_rawDescOnce sync.Once
	file_reference_proto_rawDescData = file_reference_proto_rawDesc
)

func file_reference_proto_rawDescGZIP() []byte {
	file_reference_proto_rawDescOnce.Do(func() {
		file_reference_proto_rawDescData = protoimpl.X.CompressGZIP(file_reference_proto_rawDescData)
	})
	return file_reference_proto_rawDescData
}

var file_reference_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_reference_proto_goTypes = []interface{}{
	(*SneakerBrand)(nil),         // 0: proto.SneakerBrand
	(*SneakerModel)(nil),         // 1: proto.SneakerModel
	(*SneakerReference)(nil),     // 2: proto.SneakerReference
	(*ReferenceFilter)(nil),      // 3: proto.ReferenceFilter
	(*ReferenceInput)(nil),       // 4: proto.ReferenceInput
	(*ReferenceResponse)(nil),    // 5: proto.ReferenceResponse
	(*timestamp.Timestamp)(nil),  // 6: google.protobuf.Timestamp
	(*_struct.Struct)(nil),       // 7: google.protobuf.Struct
	(*proto1.RequestParams)(nil), // 8: proto.RequestParams
}
var file_reference_proto_depIdxs = []int32{
	0,  // 0: proto.SneakerReference.brand:type_name -> proto.SneakerBrand
	1,  // 1: proto.SneakerReference.model:type_name -> proto.SneakerModel
	1,  // 2: proto.SneakerReference.baseModel:type_name -> proto.SneakerModel
	6,  // 3: proto.SneakerReference.releaseDate:type_name -> google.protobuf.Timestamp
	6,  // 4: proto.SneakerReference.AddedDate:type_name -> google.protobuf.Timestamp
	7,  // 5: proto.ReferenceFilter.requestQuery:type_name -> google.protobuf.Struct
	8,  // 6: proto.ReferenceFilter.requestParams:type_name -> proto.RequestParams
	2,  // 7: proto.ReferenceInput.references:type_name -> proto.SneakerReference
	8,  // 8: proto.ReferenceInput.requestParams:type_name -> proto.RequestParams
	2,  // 9: proto.ReferenceResponse.references:type_name -> proto.SneakerReference
	3,  // 10: proto.ReferenceService.GetReferences:input_type -> proto.ReferenceFilter
	3,  // 11: proto.ReferenceService.CountReferences:input_type -> proto.ReferenceFilter
	4,  // 12: proto.ReferenceService.AddReferences:input_type -> proto.ReferenceInput
	4,  // 13: proto.ReferenceService.EditReferences:input_type -> proto.ReferenceInput
	3,  // 14: proto.ReferenceService.DeleteReferences:input_type -> proto.ReferenceFilter
	5,  // 15: proto.ReferenceService.GetReferences:output_type -> proto.ReferenceResponse
	5,  // 16: proto.ReferenceService.CountReferences:output_type -> proto.ReferenceResponse
	5,  // 17: proto.ReferenceService.AddReferences:output_type -> proto.ReferenceResponse
	5,  // 18: proto.ReferenceService.EditReferences:output_type -> proto.ReferenceResponse
	5,  // 19: proto.ReferenceService.DeleteReferences:output_type -> proto.ReferenceResponse
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_reference_proto_init() }
func file_reference_proto_init() {
	if File_reference_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_reference_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SneakerBrand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reference_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SneakerModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reference_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SneakerReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reference_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reference_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reference_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_reference_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_reference_proto_goTypes,
		DependencyIndexes: file_reference_proto_depIdxs,
		MessageInfos:      file_reference_proto_msgTypes,
	}.Build()
	File_reference_proto = out.File
	file_reference_proto_rawDesc = nil
	file_reference_proto_goTypes = nil
	file_reference_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReferenceServiceClient is the client API for ReferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReferenceServiceClient interface {
	GetReferences(ctx context.Context, in *ReferenceFilter, opts ...grpc.CallOption) (*ReferenceResponse, error)
	CountReferences(ctx context.Context, in *ReferenceFilter, opts ...grpc.CallOption) (*ReferenceResponse, error)
	AddReferences(ctx context.Context, in *ReferenceInput, opts ...grpc.CallOption) (*ReferenceResponse, error)
	EditReferences(ctx context.Context, in *ReferenceInput, opts ...grpc.CallOption) (*ReferenceResponse, error)
	DeleteReferences(ctx context.Context, in *ReferenceFilter, opts ...grpc.CallOption) (*ReferenceResponse, error)
}

type referenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReferenceServiceClient(cc grpc.ClientConnInterface) ReferenceServiceClient {
	return &referenceServiceClient{cc}
}

func (c *referenceServiceClient) GetReferences(ctx context.Context, in *ReferenceFilter, opts ...grpc.CallOption) (*ReferenceResponse, error) {
	out := new(ReferenceResponse)
	err := c.cc.Invoke(ctx, "/proto.ReferenceService/GetReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceServiceClient) CountReferences(ctx context.Context, in *ReferenceFilter, opts ...grpc.CallOption) (*ReferenceResponse, error) {
	out := new(ReferenceResponse)
	err := c.cc.Invoke(ctx, "/proto.ReferenceService/CountReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceServiceClient) AddReferences(ctx context.Context, in *ReferenceInput, opts ...grpc.CallOption) (*ReferenceResponse, error) {
	out := new(ReferenceResponse)
	err := c.cc.Invoke(ctx, "/proto.ReferenceService/AddReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceServiceClient) EditReferences(ctx context.Context, in *ReferenceInput, opts ...grpc.CallOption) (*ReferenceResponse, error) {
	out := new(ReferenceResponse)
	err := c.cc.Invoke(ctx, "/proto.ReferenceService/EditReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceServiceClient) DeleteReferences(ctx context.Context, in *ReferenceFilter, opts ...grpc.CallOption) (*ReferenceResponse, error) {
	out := new(ReferenceResponse)
	err := c.cc.Invoke(ctx, "/proto.ReferenceService/DeleteReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferenceServiceServer is the server API for ReferenceService service.
type ReferenceServiceServer interface {
	GetReferences(context.Context, *ReferenceFilter) (*ReferenceResponse, error)
	CountReferences(context.Context, *ReferenceFilter) (*ReferenceResponse, error)
	AddReferences(context.Context, *ReferenceInput) (*ReferenceResponse, error)
	EditReferences(context.Context, *ReferenceInput) (*ReferenceResponse, error)
	DeleteReferences(context.Context, *ReferenceFilter) (*ReferenceResponse, error)
}

// UnimplementedReferenceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReferenceServiceServer struct {
}

func (*UnimplementedReferenceServiceServer) GetReferences(context.Context, *ReferenceFilter) (*ReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferences not implemented")
}
func (*UnimplementedReferenceServiceServer) CountReferences(context.Context, *ReferenceFilter) (*ReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountReferences not implemented")
}
func (*UnimplementedReferenceServiceServer) AddReferences(context.Context, *ReferenceInput) (*ReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReferences not implemented")
}
func (*UnimplementedReferenceServiceServer) EditReferences(context.Context, *ReferenceInput) (*ReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditReferences not implemented")
}
func (*UnimplementedReferenceServiceServer) DeleteReferences(context.Context, *ReferenceFilter) (*ReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReferences not implemented")
}

func RegisterReferenceServiceServer(s *grpc.Server, srv ReferenceServiceServer) {
	s.RegisterService(&_ReferenceService_serviceDesc, srv)
}

func _ReferenceService_GetReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).GetReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReferenceService/GetReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).GetReferences(ctx, req.(*ReferenceFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceService_CountReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).CountReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReferenceService/CountReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).CountReferences(ctx, req.(*ReferenceFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceService_AddReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).AddReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReferenceService/AddReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).AddReferences(ctx, req.(*ReferenceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceService_EditReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).EditReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReferenceService/EditReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).EditReferences(ctx, req.(*ReferenceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceService_DeleteReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceServiceServer).DeleteReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReferenceService/DeleteReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceServiceServer).DeleteReferences(ctx, req.(*ReferenceFilter))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReferenceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ReferenceService",
	HandlerType: (*ReferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReferences",
			Handler:    _ReferenceService_GetReferences_Handler,
		},
		{
			MethodName: "CountReferences",
			Handler:    _ReferenceService_CountReferences_Handler,
		},
		{
			MethodName: "AddReferences",
			Handler:    _ReferenceService_AddReferences_Handler,
		},
		{
			MethodName: "EditReferences",
			Handler:    _ReferenceService_EditReferences_Handler,
		},
		{
			MethodName: "DeleteReferences",
			Handler:    _ReferenceService_DeleteReferences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reference.proto",
}
