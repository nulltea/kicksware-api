image:
    name: docker/compose:1.25.0
    entrypoint: [""]

services:
    - docker:stable-dind

stages:
    - init
    - build
    - test
    - deploy

before_script: &common-before
    - export SOURCE_DIR="/source/repos/$CI_PROJECT_NAME"

#---init stage---#

init-source-step:
  stage: init
  tags:
    - init
  script: 
    - docker version
    - docker-compose version
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY 
    - export SOURCE_DIR="/source/repos/$CI_PROJECT_NAME"
    - cp -r /builds/root/* /source/repos/

#----------------#

#---build stage---#

build-styles-step:
  stage: build
  image: node:8-alpine
  variables:
    NODE_ENV: "development"
  tags:
    - webapp
    - build
  before_script:
    - apk add --update bash
    - apk add --update git && rm -rf /tmp/* /var/cache/apk/*
    - npm install
    - npm install -g lessc-each
  script:
    - mkdir web-app-service/Web/wwwroot/styles/css
    - for dir in web-app-service/Web/wwwroot/styles/less/*;
          do lessc-each web-app-service/Web/wwwroot/styles/less/$(basename ${dir}) web-app-service/Web/wwwroot/styles/css/$(basename ${dir}); 
      done
  artifacts:
    paths:
      - web-app-service/Web/wwwroot/styles/css
    expire_in: 10 mins

#----------------#

#---test stage---#

test-sonar-step:
    stage: test
    image:
      name: sonarsource/sonar-scanner-cli:latest
      entrypoint: [""]
    tags:
      - test
    variables:
      SONAR_TOKEN: "8d26b9c30a611a96a53eb1f6e30326a17e186a83"
      SONAR_HOST_URL: "http://test.kicksware.com:9000"
      GIT_DEPTH: 0
    script: 
      - sonar-scanner -Dsonar.qualitygate.wait=true
    allow_failure: true
    only:
      - merge_requests
      - master

#----------------#

#---deploy stage---#

deploy-proxy-step:
    stage: deploy
    before_script:
      - *common-before
      - export DYNAMIC_ENV_VAR=PROD
    tags:
      - deploy
      - proxy
    script:
      - echo setting up env $DYNAMIC_ENV_VAR
      - docker-compose -f proxy-service/docker-compose.yml down
      - docker-compose -f proxy-service/docker-compose.yml build
      - docker-compose -f proxy-service/docker-compose.yml up -d

deploy-middleware-step:
    stage: deploy
    before_script: 
      - *common-before
      - export DYNAMIC_ENV_VAR=PROD
      - docker exec mongo mongodump -u root -p greenJordans --authenticationDatabase admin --db=sneakerResaleDB  --out=/backup
    tags:
      - middleware
      - deploy
    script:
      - echo setting up env $DYNAMIC_ENV_VAR
      - docker-compose -f middleware-service/docker-compose.yml down
      - docker-compose -f middleware-service/docker-compose.yml build
      - docker-compose -f middleware-service/docker-compose.yml up -d
    after_script:
      - docker exec mongo mongorestore -u root -p greenJordans --authenticationDatabase admin ./backup

deploy-webapp-step:
    stage: deploy
    before_script:
      - *common-before
      - export DYNAMIC_ENV_VAR=PROD
    tags:
      - webapp
      - deploy
    script:
      - echo setting up env $DYNAMIC_ENV_VAR
      - docker-compose -f web-app-service/docker-compose.yml down
      - docker-compose -f web-app-service/docker-compose.yml build
      - docker-compose -f web-app-service/docker-compose.yml up -d
    dependencies:
      - build-styles-step

#----------------#
