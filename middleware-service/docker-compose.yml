version: '3.7'
services:
  products-service:
    build:
      context: ./product-service
      dockerfile: ./docker/Dockerfile
      target: dev
    env_file: ./product-service/env/.env.prod
    hostname: kicksware.com
    image: products-service
    restart: always
    labels:
      - traefik.http.routers.product-service.rule=Host(`api.kicksware.com`) && PathPrefix(`/products`)
      - traefik.http.routers.product-service.tls=true
      - traefik.http.routers.product-service.tls.certresolver=le
      - traefik.docker.network=web
    networks:
      - web
      - data
    volumes:
      - /${SOURCE_DIR}/middleware-service/product-service/env:/dist/env
      - key-source:/key
    links:
      - mongodb
    depends_on:
      - mongodb

  users-service:
    build:
      context: ./user-service
      dockerfile: ./docker/Dockerfile
      target: dev
    env_file: ./user-service/env/.env.prod
    hostname: kicksware.com
    image: users-service
    restart: always
    labels:
      - traefik.http.routers.user-service.rule=Host(`api.kicksware.com`) && PathPrefix(`/users`) || PathPrefix(`/auth`) ||
        PathPrefix(`/mail`) || PathPrefix(`/interact`)
      - traefik.http.routers.user-service.tls=true
      - traefik.http.routers.user-service.tls.certresolver=le
      - traefik.docker.network=web
    networks:
      - web
      - data
    volumes:
      - /${SOURCE_DIR}/middleware-service/user-service/env:/dist/env
      - /${SOURCE_DIR}/middleware-service/user-service/template:/dist/template
      - key-source:/dist/key
      - key-source:/key
    links:
      - mongodb
    depends_on:
      - mongodb

  references-service:
    build:
      context: ./reference-service
      dockerfile: ./docker/Dockerfile
      target: dev
    env_file: ./reference-service/env/.env.prod
    image: references-service
    restart: always
    labels:
      - traefik.http.routers.reference-service.rule=Host(`api.kicksware.com`) && PathPrefix(`/references`)
      - traefik.http.routers.reference-service.tls=true
      - traefik.http.routers.reference-service.tls.certresolver=le
      - traefik.docker.network=web
    volumes:
      - /${SOURCE_DIR}/middleware-service/reference-service/env:/dist/env
      - key-source:/key
    networks:
      - web
      - data
    links:
      - mongodb
    depends_on:
      - mongodb


  search-service:
    build:
      context: ./search-service
      dockerfile: ./docker/Dockerfile
      target: dev
    image: search-service
    restart: always
    env_file: ./search-service/env/.env.prod
    labels:
      - traefik.http.routers.search-service.rule=Host(`api.kicksware.com`) && PathPrefix(`/search`)
      - traefik.http.routers.search-service.tls=true
      - traefik.http.routers.search-service.tls.certresolver=le
      - traefik.docker.network=web
    networks:
      - web
      - elastic
      - data
    volumes:
      - /${SOURCE_DIR}/middleware-service/search-service/env:/dist/env
      - key-source:/key
    links:
      - references-service
      - products-service
      - elasticsearch
      - kibana
    depends_on:
      - references-service
      - products-service
      - elasticsearch
      - kibana


  mongodb:
    image: mongo:3.6.17
    restart: always
    environment:
      - MONGO_INITDB_DATABASE=sneakerResaleDB
    labels:
      - traefik.http.routers.mongodb.rule=Host(`db.kicksware.com`) && PathPrefix(`/mongo`)
      - traefik.http.routers.mongodb.tls=true
      - traefik.http.routers.mongodb.tls.certresolver=le
      - traefik.docker.network=web
    volumes:
      - backup-source:/backup
      - ./backup/mongo/init.sh:/docker-entrypoint-initdb.d/init.sh
    networks:
      - web
      - data
    # logging:
    #  driver: none

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.1
    restart: always
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    labels:
      - traefik.http.routers.elasticsearch.rule=Host(`ops.kicksware.com`) && PathPrefix(`/elastic`)
      - traefik.http.routers.elasticsearch.tls=true
      - traefik.http.routers.elasticsearch.tls.certresolver=le
      - traefik.docker.network=web
    networks:
      - web
      - elastic
    #logging:
    #  driver: none

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.6.1
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    labels:
      - traefik.http.routers.kibana.rule=Host(`ops.kicksware.com`) && PathPrefix(`/kibana`) || PathPrefix(`/app/kibana`)
      - traefik.http.routers.kibana.tls=true
      - traefik.http.routers.kibana.tls.certresolver=le
      - traefik.docker.network=web
      - traefik.http.middlewares.add-app.addprefix.prefix=/app/
    networks:
      - web
      - elastic
    logging:
      driver: none

networks:
  elastic:
    driver: bridge
  data:
    driver: bridge
  web:
    external: true

volumes:
  key-source:
    driver: local
    driver_opts:
       o: bind
       type: none
       device: /source/keys
  backup-source:
    driver: local
    driver_opts:
       o: bind
       type: none
       device: /source/backup
  elasticsearch-data:
