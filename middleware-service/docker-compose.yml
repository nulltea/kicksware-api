version: '3.7'
services:
  traefik:
    container_name: traefik
    image:  traefik:v2.0
    restart: always
    command:
      - --log.level=INFO
      - --api=true
      - --api.insecure
      - --api.dashboard=true
      - --providers.docker=true
      - --entryPoints.web.address=:80
      # - --entryPoints.websecure.address=:443
      # - --certificatesResolvers.le.acme.email=microservicego@gmail.com
      # - --certificatesResolvers.le.acme.storage=/cert/acme.json
      # - --certificatesResolvers.le.acme.dnsChallenge=true
      # - --certificatesResolvers.le.acme.dnsChallenge.provider=digitalocean
    labels:
      - traefik.http.routers.traefik.entrypoints=web
      - traefik.http.routers.traefik.rule=Host(`kicksware.com`)
      # - traefik.http.routers.traefik-secure.entrypoints=websecure
      # - traefik.http.routers.traefik-secure.rule=Host(`kicksware.com`)
      # - traefik.http.routers.traefik.middlewares=traefik-https-redirect
      # - traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https
      # - traefik.http.middlewares.traefik-https-redirect.redirectscheme.permanent=true
      # - traefik.http.routers.traefik-secure.middlewares=traefik-auth
      # - traefik.http.middlewares.traefik-auth.basicauth.users=USER:PASSWORD
      - traefik.docker.network=middleware-service_web
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    networks:
      - web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./cert:/cert
  product-service:
    build:
      context: ./product-service
      dockerfile: ./docker/Dockerfile
      target: dev
    env_file: ./product-service/env/.env
    image: product-service
    restart: always
    labels:
      - traefik.http.routers.product-service.rule=Host(`kicksware.com`) && PathPrefix(`/products`)
      # - traefik.http.routers.product-service.tls=true
      # - traefik.http.routers.product-service.tls.certresolver=le
      - traefik.docker.network=middleware-service_web
    networks:
      - web
      - data
    links:
      - mongodb
    depends_on:
      - mongodb

  user-service:
    build:
      context: ./user-service
      dockerfile: ./docker/Dockerfile
      target: dev
    env_file: ./user-service/env/.env
    image: user-service
    restart: always
    labels:
      - traefik.http.routers.user-service.rule=Host(`kicksware.com`) && PathPrefix(`/users`)
      # - traefik.http.routers.user-service.tls=true
      # - traefik.http.routers.user-service.tls.certresolver=le
      - traefik.docker.network=middleware-service_web
    networks:
      - web
      - data
    links:
      - mongodb
    depends_on:
      - mongodb

  search-service:
    build:
      context: ./elastic-search-service
      dockerfile: ./docker/Dockerfile
      target: dev
    image: search-service
    restart: always
    env_file: ./elastic-search-service/env/.env
    labels:
      - traefik.http.routers.search-service.rule=Host(`kicksware.com`) && PathPrefix(`/search`)
      # - traefik.http.routers.search-service.tls=true
      # - traefik.http.routers.search-service.tls.certresolver=le
      - traefik.docker.network=middleware-service_web
    networks:
      - web
      - elastic
      - data
    links:
      - mongodb
      - elasticsearch
      - kibana
    depends_on:
      - mongodb
      - elasticsearch
      - kibana


  mongodb:
    image: mongo:3.6.17
    restart: always
    ports:
      - 27017:27017
      - 27018:27017
    environment:
      - MONGO_INITDB_DATABASE=sneakerResaleDB
    volumes:
      - type: bind
        source: ./backup/mongo
        target: /backup/mongo
      - ./backup/mongo/init.sh:/docker-entrypoint-initdb.d/init.sh
    networks:
      - data

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.1
    restart: always
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    networks:
      - elastic
    logging:
      driver: none

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.6.1
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    networks:
      - elastic
    logging:
      driver: none

networks:
  elastic:
    driver: bridge
  data:
    driver: bridge
  web:
    driver: bridge

volumes:
  elasticsearch-data:
